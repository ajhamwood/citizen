let Bit : U = {B} -> B -> B -> B;
let I : Bit = \i o. i;
let O : Bit = \i o. o;

let Nat : U    = {N} -> (N -> N) -> N -> N;
let zero : Nat = \s z. z;
let suc : Nat -> Nat = \n s z. s (n s z);

let Pair : U -> U -> U
    = \A B. {P} -> (A -> B -> P) -> P;
let pair : {A B} -> A -> B -> Pair A B
    = \a b p. p a b;
let fst : {A B} -> Pair A B -> A
    = \s. s (\a b. a);
let snd : {A B} -> Pair A B -> B
    = \s. s (\a b. b);

let fold : {A} -> (Nat -> A -> A) -> A -> Nat -> A
    = \{A} r base n. snd {Nat} (n {Pair Nat A}
        (\p. pair (suc (fst p)) (r (fst p) (snd p)))
        (pair zero base));

let Tree : {n} -> U -> U
    = \{n} A. (T: Nat -> U) -> (A -> A -> T zero) -> ({m} -> T m -> T m -> T (suc m)) -> T n;
let leaf : {A} -> A -> A -> Tree {zero} A
    = \a b T l n. l a b;
let node : {n A} -> Tree {n} A -> Tree {n} A -> Tree {suc n} A
    = \ta tb T l n. n (ta T l n) (tb T l n);

let initWord : (n : Nat) -> Tree {n} Bit
    = \n. fold {Tree {n} Bit} (\k acc. node {k}{Bit} acc acc) (leaf {Bit} O O) n;

initWord zero